using System;
using System.Collections.Generic;

namespace BehavioralPatterns
{
    // ==============================================================
    // 1Ô∏è‚É£ PATTERN STRATEGY ‚Äî –†–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    // ==============================================================

    // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–ø–ª–∞—Ç—ã
    public interface IPaymentStrategy
    {
        void Pay(double amount);
    }

    // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    public class CreditCardPayment : IPaymentStrategy
    {
        private string CardNumber;
        public CreditCardPayment(string cardNumber) { CardNumber = cardNumber; }
        public void Pay(double amount)
        {
            Console.WriteLine($"üí≥ –û–ø–ª–∞—Ç–∞ {amount}‚Ç∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π (–Ω–æ–º–µ—Ä: {CardNumber}) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
        }
    }

    public class PayPalPayment : IPaymentStrategy
    {
        private string Email;
        public PayPalPayment(string email) { Email = email; }
        public void Pay(double amount)
        {
            Console.WriteLine($"üí∞ –û–ø–ª–∞—Ç–∞ {amount}‚Ç∏ —á–µ—Ä–µ–∑ PayPal –∞–∫–∫–∞—É–Ω—Ç ({Email}) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
        }
    }

    public class CryptoPayment : IPaymentStrategy
    {
        private string Wallet;
        public CryptoPayment(string wallet) { Wallet = wallet; }
        public void Pay(double amount)
        {
            Console.WriteLine($"ü™ô –û–ø–ª–∞—Ç–∞ {amount}‚Ç∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (–∫–æ—à–µ–ª—ë–∫: {Wallet}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ.");
        }
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã
    public class PaymentContext
    {
        private IPaymentStrategy _strategy;

        public void SetStrategy(IPaymentStrategy strategy)
        {
            _strategy = strategy;
        }

        public void ExecutePayment(double amount)
        {
            if (_strategy == null)
            {
                Console.WriteLine("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–ø–ª–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!");
                return;
            }
            _strategy.Pay(amount);
        }
    }

    // ==============================================================
    // 2Ô∏è‚É£ PATTERN OBSERVER ‚Äî –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
    // ==============================================================

    // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    public interface IObserver
    {
        void Update(string currency, double rate);
    }

    // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—É–±—ä–µ–∫—Ç–∞
    public interface ISubject
    {
        void Attach(IObserver observer);
        void Detach(IObserver observer);
        void Notify();
    }

    // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—É–±—ä–µ–∫—Ç ‚Äî –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    public class CurrencyExchange : ISubject
    {
        private List<IObserver> _observers = new();
        private Dictionary<string, double> _rates = new();

        public void SetRate(string currency, double rate)
        {
            _rates[currency] = rate;
            Console.WriteLine($"\nüí± –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {currency} = {rate}‚Ç∏");
            Notify();
        }

        public Dictionary<string, double> GetRates() => _rates;

        public void Attach(IObserver observer)
        {
            _observers.Add(observer);
            Console.WriteLine("üëÄ –ù–æ–≤—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.");
        }

        public void Detach(IObserver observer)
        {
            _observers.Remove(observer);
            Console.WriteLine("üëã –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.");
        }

        public void Notify()
        {
            foreach (var observer in _observers)
                foreach (var rate in _rates)
                    observer.Update(rate.Key, rate.Value);
        }
    }

    // ---------- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ ----------
    public class MobileAppObserver : IObserver
    {
        public void Update(string currency, double rate)
        {
            Console.WriteLine($"üì± [–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ] –ù–æ–≤—ã–π –∫—É—Ä—Å: {currency} = {rate}‚Ç∏");
        }
    }

    public class WebDashboardObserver : IObserver
    {
        public void Update(string currency, double rate)
        {
            Console.WriteLine($"üíª [–í–µ–±-–ø–∞–Ω–µ–ª—å] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {currency} = {rate}‚Ç∏");
        }
    }

    public class BankAlertObserver : IObserver
    {
        public void Update(string currency, double rate)
        {
            if (rate > 500)
                Console.WriteLine($"üè¶ [–ë–∞–Ω–∫] –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã—Å–æ–∫–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã {currency}: {rate}‚Ç∏");
        }
    }

    // ==============================================================
    // MAIN ‚Äî –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–≤—É—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    // ==============================================================

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("=== –ü–ê–¢–¢–ï–†–ù 1: –°–¢–†–ê–¢–ï–ì–ò–Ø (–°–ü–û–°–û–ë–´ –û–ü–õ–ê–¢–´) ===\n");

            PaymentContext payment = new PaymentContext();

            // –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π
            Console.WriteLine("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: 1 - –ö–∞—Ä—Ç–æ–π, 2 - PayPal, 3 - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π");
            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    payment.SetStrategy(new CreditCardPayment("1111-2222-3333-4444"));
                    break;
                case "2":
                    payment.SetStrategy(new PayPalPayment("user@example.com"));
                    break;
                case "3":
                    payment.SetStrategy(new CryptoPayment("0xA1B2C3D4E5F6"));
                    break;
                default:
                    Console.WriteLine("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
                    payment.SetStrategy(new CreditCardPayment("0000-0000-0000-0000"));
                    break;
            }

            payment.ExecutePayment(15000);

            // ======================================================
            Console.WriteLine("\n=== –ü–ê–¢–¢–ï–†–ù 2: –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–¨ (–û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ö–£–†–°–û–í) ===\n");

            var exchange = new CurrencyExchange();
            var mobile = new MobileAppObserver();
            var web = new WebDashboardObserver();
            var bank = new BankAlertObserver();

            exchange.Attach(mobile);
            exchange.Attach(web);
            exchange.Attach(bank);

            // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
            exchange.SetRate("USD", 480);
            exchange.SetRate("EUR", 510);

            // –£–¥–∞–ª–∏–º –æ–¥–Ω–æ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
            exchange.Detach(web);

            // –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
            exchange.SetRate("RUB", 5.2);

            Console.WriteLine("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
        }
    }
}
