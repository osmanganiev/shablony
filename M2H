public enum LogLevel
{
    Error,
    Warning,
    Info
}

public class Logger
{
    public void Log(string message, LogLevel level)
    {
        Console.WriteLine($"{level.ToString().ToUpper()}: {message}");
    }
}

// Общая конфигурация
public static class AppConfig
{
    public static string ConnectionString { get; } =
        "Server=myServer;Database=myDb;User Id=myUser;Password=myPass;";
}

public class DatabaseService
{
    public void Connect()
    {
        string connectionString = AppConfig.ConnectionString;
        // Логика подключения к базе данных
    }
}

public class LoggingService
{
    public void Log(string message)
    {
        string connectionString = AppConfig.ConnectionString;
        // Логика записи лога в базу данных
    }
}
public void ProcessNumbers(int[] numbers)
{
    if (numbers == null || numbers.Length == 0) return;

    foreach (var number in numbers)
    {
        if (number > 0)
            Console.WriteLine(number);
    }
}

public void PrintPositiveNumbers(int[] numbers)
{
    foreach (var number in numbers)
    {
        if (number > 0)
            Console.WriteLine(number);
    }
}

public int Divide(int a, int b)
{
    if (b == 0) return 0;
    return a / b;
}
public class User
{
    public string Name { get; set; }
    public string Email { get; set; }
}

// Только чтение файла, без лишних параметров
public class FileReader
{
    public string ReadFile(string filePath)
    {
        // Простая логика чтения файла
        return "file content";
    }
}

// Генератор отчётов только в нужном формате (например PDF)
public class ReportGenerator
{
    public void GeneratePdfReport()
    {
        // Генерация PDF отчета
    }
}
